@using Microsoft.AspNetCore.Components
@using Tionit.Enterprise.Exceptions
@using Tionit.ShopOnline.Backoffice.InteropServices
@using Tionit.ShopOnline.Backoffice.Application.Commands.Administrators
@using Tionit.ShopOnline.Backoffice.Application.Commands.Administrators.Models

@inject UserSession UserSession
@inject NavigationManager NavigationManager
@inject Messages Messages
@inject Blocker Blocker
@inject Executor<ChangeAdministratorPasswordCommand> ChangeAdministratorPasswordCommandExecutor
<!-- begin:: Header -->
<div id="kt_header" class="kt-header kt-grid__item  kt-header--fixed ">
    <div></div>

    <!-- begin:: Header Topbar -->
    <div class="kt-header__topbar">
        
        <!--begin: User Bar -->

        <div class="kt-header__topbar-item kt-header__topbar-item--user">
            <div class="kt-header__topbar-wrapper" data-toggle="dropdown" data-offset="0px,0px">
                <div class="kt-header__topbar-user">
                    <img alt="Pic" src="img/user.png" />
                    <span class="kt-header__topbar-username kt-hidden-mobile" style="font-weight: bold">@UserSession.Name</span>
                </div>
            </div>
            <div class="dropdown-menu dropdown-menu-fit dropdown-menu-right dropdown-menu-anim dropdown-menu-top-unround dropdown-menu-xl">

                <div class="kt-user-card kt-user-card--skin-dark kt-notification-item-padding-x"
                     style="background-image: url(./img/user-bg.jpg)">
                    <div class="kt-user-card__avatar">
                        <span class="kt-badge kt-badge--lg kt-badge--rounded kt-badge--bold kt-font-success">
                            <img alt="Pic" src="img/user.png" />
                        </span>
                    </div>
                    <div class="kt-user-card__name">
                        @UserSession.Name
                    </div>
                </div>

                <div class="kt-notification">
                    <a href="javascript: void(0);" class="kt-notification__item" @onclick="@ShowChangePasswordWindow">
                        <div class="kt-notification__item-icon">
                            <i class="la la-key kt-font-success"></i>
                        </div>
                        <div class="kt-notification__item-details">
                            <div class="kt-notification__item-title kt-font-bold">
                                Сменить пароль
                            </div>
                        </div>
                    </a>
                    <a href="javascript: void(0);" class="kt-notification__item" @onclick="@SignOut">
                        <div class="kt-notification__item-icon">
                            <i class="la la-sign-out kt-font-warning"></i>
                        </div>
                        <div class="kt-notification__item-details">
                            <div class="kt-notification__item-title kt-font-bold">
                                Выйти
                            </div>
                        </div>
                    </a>
                </div>
            </div>
        </div>
        <!--end: User Bar -->
    </div>
    <!-- end:: Header Topbar -->
</div>
<!-- end:: Header -->

<TelerikWindow Width="470px" Height="330px" Centered="true" Visible=@IsChangePasswordWindowVisible Modal="true">
    <WindowTitle>
        <strong><i class="la la-user-secret"></i> Смена пароля</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>

        <div class="full-width p-2">
            <span class="k-textbox-container telerik-blazor full-width @(string.IsNullOrEmpty(OldPassword)?"k-state-empty":"")">
                <input id="oldPasswordInput" class="k-textbox" @bind-value="@OldPassword" @bind-value:event="oninput" type="password" />
                <label for="oldPasswordInput" class="k-label">Старый пароль</label>
            </span>
            <span class="k-textbox-container telerik-blazor full-width @(string.IsNullOrEmpty(NewPassword)?"k-state-empty":"")">
                <input id="newPasswordInput" class="k-textbox" @bind-value="@NewPassword" @bind-value:event="oninput" type="password" />
                <label for="newPasswordInput" class="k-label">Новый пароль</label>
            </span>
            <span class="k-textbox-container telerik-blazor full-width @(string.IsNullOrEmpty(NewPasswordConfirmation)?"k-state-empty":"")">
                <input id="newPasswordConfirmInput" class="k-textbox" @bind-value="@NewPasswordConfirmation" @bind-value:event="oninput" type="password" />
                <label for="newPasswordConfirmInput" class="k-label">Подтверждение пароля</label>
            </span>
        </div>
        <div class="float-right mt-2 p-2">
            <button class="btn btn-success btn-elevate btn-elevate-air" @onclick="@ChangePassword"
                    disabled="@(!IsChangePasswordButtonEnabled)" type="button">
                <i class="la la-user-secret"></i> Сменить пароль
            </button>
        </div>

    </WindowContent>
</TelerikWindow>

@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!UserSession.IsLoaded)
        {
            while (!UserSession.IsLoaded)
            {
                await Task.Delay(100);
            }
            StateHasChanged();
        }
    }

    #region Смена пароля

    /// <summary>
    /// Окно смены пароля отображается?
    /// </summary>
    public bool IsChangePasswordWindowVisible { get; set; }

    /// <summary>
    /// Старый пароль
    /// </summary>
    public string OldPassword { get; set; }

    /// <summary>
    /// Новый пароль
    /// </summary>
    public string NewPassword { get; set; }

    /// <summary>
    /// Подтверждение нового пароля
    /// </summary>
    public string NewPasswordConfirmation { get; set; }

    /// <summary>
    /// Кнопка смены пароля доступна?
    /// </summary>
    public bool IsChangePasswordButtonEnabled => !string.IsNullOrEmpty(OldPassword) &&
                                          !string.IsNullOrEmpty(NewPassword) &&
                                          !string.IsNullOrEmpty(NewPasswordConfirmation) &&
                                          NewPassword == NewPasswordConfirmation;

    ///// <summary>
    ///// Отображает окно смены пароля админом
    ///// </summary>
    private void ShowChangePasswordWindow()
    {
        IsChangePasswordWindowVisible = true;
    }

    /// <summary>
    /// Изменяет пароль
    /// </summary>
    private async Task ChangePassword()
    {
        await Blocker.BlockPage();

        try
        {
            //await Messages.ShowSuccess("Необходимо написать функционал изменения пароля");
            {
                var input = new ChangeAdministratorPasswordInputModel
                {
                    OldPassword = OldPassword,
                    NewPassword = NewPassword,
                    NewPasswordConfirmation = NewPasswordConfirmation
                };

                var result = await ChangeAdministratorPasswordCommandExecutor.Execute(command => command.Execute(input));

                // начинаем сессию с новым токеном
                await UserSession.StartSession(UserSession.Name, result.AccessToken);

                await Messages.ShowSuccess("Пароль успешно изменён");

                IsChangePasswordWindowVisible = false;
            }
        }
        catch (BusinessException e)
        {
            await Messages.ShowError(e.Message);
        }

        await Blocker.UnblockPage();
    }

    #endregion Смена пароля

    #region Выход

    /// <summary>
    /// Осуществляет выход админа из системы
    /// </summary>
    private async Task SignOut()
    {
        await UserSession.FinishSession();
        NavigationManager.NavigateTo("/");
    }

    #endregion Выход
}
